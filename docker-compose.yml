version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./fastapi-app:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./react-frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./react-frontend:/app
    working_dir: /app
    depends_on:
      - backend
    networks:
      - app_network
    environment:
      - REACT_APP_API_URL=http://backend:8000
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  tika:
    image: apache/tika:2.9.0.0
    ports:
      - "9998:9998"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9998 || exit 0"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 60s

  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A fastapi-app.celery_app worker --loglevel=info
    volumes:
      - ./uploads:/app/uploads
      - ./fastapi-app:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      tika:
        condition: service_healthy
    networks:
      - app_network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A fastapi-app.celery_app beat --loglevel=info
    volumes:
      - ./uploads:/app/uploads
      - ./fastapi-app:/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  ai-summarization:
    build:
      context: .
      dockerfile: Dockerfile.ai-summarization
    ports:
      - "8002:8002"
    volumes:
      - ./fastapi-app:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auto-tagging:
    build:
      context: .
      dockerfile: Dockerfile.auto-tagging
    ports:
      - "8001:8001"
    volumes:
      - ./fastapi-app:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-data:

networks:
  app_network:
    driver: bridge
